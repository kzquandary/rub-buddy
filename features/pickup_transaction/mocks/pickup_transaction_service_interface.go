// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	pickuptransaction "rub_buddy/features/pickup_transaction"

	mock "github.com/stretchr/testify/mock"
)

// PickupTransactionServiceInterface is an autogenerated mock type for the PickupTransactionServiceInterface type
type PickupTransactionServiceInterface struct {
	mock.Mock
}

// CreatePickupTransaction provides a mock function with given fields: newData
func (_m *PickupTransactionServiceInterface) CreatePickupTransaction(newData pickuptransaction.PickupTransaction) (*pickuptransaction.PickupTransactionCreate, error) {
	ret := _m.Called(newData)

	if len(ret) == 0 {
		panic("no return value specified for CreatePickupTransaction")
	}

	var r0 *pickuptransaction.PickupTransactionCreate
	var r1 error
	if rf, ok := ret.Get(0).(func(pickuptransaction.PickupTransaction) (*pickuptransaction.PickupTransactionCreate, error)); ok {
		return rf(newData)
	}
	if rf, ok := ret.Get(0).(func(pickuptransaction.PickupTransaction) *pickuptransaction.PickupTransactionCreate); ok {
		r0 = rf(newData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pickuptransaction.PickupTransactionCreate)
		}
	}

	if rf, ok := ret.Get(1).(func(pickuptransaction.PickupTransaction) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllPickupTransaction provides a mock function with given fields: userId
func (_m *PickupTransactionServiceInterface) GetAllPickupTransaction(userId uint) ([]pickuptransaction.PickupTransactionInfo, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPickupTransaction")
	}

	var r0 []pickuptransaction.PickupTransactionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]pickuptransaction.PickupTransactionInfo, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(uint) []pickuptransaction.PickupTransactionInfo); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pickuptransaction.PickupTransactionInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPickupTransactionByID provides a mock function with given fields: id
func (_m *PickupTransactionServiceInterface) GetPickupTransactionByID(id int) (pickuptransaction.PickupTransactionInfo, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetPickupTransactionByID")
	}

	var r0 pickuptransaction.PickupTransactionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (pickuptransaction.PickupTransactionInfo, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) pickuptransaction.PickupTransactionInfo); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(pickuptransaction.PickupTransactionInfo)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPickupTransactionServiceInterface creates a new instance of PickupTransactionServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPickupTransactionServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *PickupTransactionServiceInterface {
	mock := &PickupTransactionServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
