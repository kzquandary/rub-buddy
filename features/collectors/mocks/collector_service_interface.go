// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	collectors "rub_buddy/features/collectors"

	mock "github.com/stretchr/testify/mock"
)

// CollectorServiceInterface is an autogenerated mock type for the CollectorServiceInterface type
type CollectorServiceInterface struct {
	mock.Mock
}

// GetCollectorByEmail provides a mock function with given fields: email
func (_m *CollectorServiceInterface) GetCollectorByEmail(email string) (*collectors.Collectors, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetCollectorByEmail")
	}

	var r0 *collectors.Collectors
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*collectors.Collectors, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *collectors.Collectors); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*collectors.Collectors)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: email, password
func (_m *CollectorServiceInterface) Login(email string, password string) (*collectors.CollectorCredentials, error) {
	ret := _m.Called(email, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *collectors.CollectorCredentials
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*collectors.CollectorCredentials, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) *collectors.CollectorCredentials); ok {
		r0 = rf(email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*collectors.CollectorCredentials)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: newUser
func (_m *CollectorServiceInterface) Register(newUser collectors.Collectors) (*collectors.Collectors, error) {
	ret := _m.Called(newUser)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *collectors.Collectors
	var r1 error
	if rf, ok := ret.Get(0).(func(collectors.Collectors) (*collectors.Collectors, error)); ok {
		return rf(newUser)
	}
	if rf, ok := ret.Get(0).(func(collectors.Collectors) *collectors.Collectors); ok {
		r0 = rf(newUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*collectors.Collectors)
		}
	}

	if rf, ok := ret.Get(1).(func(collectors.Collectors) error); ok {
		r1 = rf(newUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCollector provides a mock function with given fields: user
func (_m *CollectorServiceInterface) UpdateCollector(user *collectors.CollectorUpdate) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCollector")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*collectors.CollectorUpdate) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCollectorServiceInterface creates a new instance of CollectorServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCollectorServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *CollectorServiceInterface {
	mock := &CollectorServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
