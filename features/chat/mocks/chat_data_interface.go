// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	chat "rub_buddy/features/chat"

	mock "github.com/stretchr/testify/mock"
)

// ChatDataInterface is an autogenerated mock type for the ChatDataInterface type
type ChatDataInterface struct {
	mock.Mock
}

// GetChat provides a mock function with given fields: id, role
func (_m *ChatDataInterface) GetChat(id uint, role string) ([]chat.ChatInfo, error) {
	ret := _m.Called(id, role)

	if len(ret) == 0 {
		panic("no return value specified for GetChat")
	}

	var r0 []chat.ChatInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, string) ([]chat.ChatInfo, error)); ok {
		return rf(id, role)
	}
	if rf, ok := ret.Get(0).(func(uint, string) []chat.ChatInfo); ok {
		r0 = rf(id, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]chat.ChatInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, string) error); ok {
		r1 = rf(id, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewChatDataInterface creates a new instance of ChatDataInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChatDataInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChatDataInterface {
	mock := &ChatDataInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
